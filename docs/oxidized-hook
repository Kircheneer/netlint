This assumes using oxidized with an git basted storage, it might look little different if you use flat-file storage.
1) create /opt/nettools/
2) copy contrib/cfgchanged.sh to /opt/nettools/ (make sure it's executable)
3) In the oxidized config file `.config/oxidized/config` add the following :

```
hooks:
  conf_changed:
    type: exec
    events: [post_store]
    cmd: '/opt/nettools/cfgchanged.sh $OX_EVENT $OX_NODE_NAME $OX_NODE_IP $OX_NODE_FROM $OX_NODE_MSG $OX_NODE_GROUP $OX_NODE_MODEL $OX_JOB_STATUS $OX_JOB_TIME $OX_REPO_COMMITREF $OX_REPO_NAME'
```
now whenever oxidized detects a config change, the `/opt/nettools/cfgchanged.sh` script is fired.
It leaves you with all most recent configs in `/opt/nettools/data/` (The tree structure below depends upon the oxidized config.)
It also calls the `validate_config.sh` script in the same folder, with two parameters:
a) The full name of the device config
b) The devicetype as defined in oxidized
So `validate_config.sh` wil have to call/ execute the validation.

Bonus: 
If you use an IDS (t.ex. OSSEC) you can monitors the `/opt/nettools/data` folder (ignore .git folders) to report changes the network.
*NOTE* It only reports as fast and often as oxidized is running !!
